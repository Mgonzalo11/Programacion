package interfaz;

// Declaraciones de Importaci√≥n.
import dominio.Catalogo;
import dominio.Software;
import java.util.InputMismatchException;
import java.util.Scanner;

/**
 * Clase para manejar el men√∫ de la aplicaci√≥n.
 */
public class Menu {
    private final Catalogo catalogo;  // Cat√°logo de software a gestionar.
    private final Scanner scanner;     // Scanner para entrada de datos.

    // Definici√≥n de constantes
    private static final String MENSAJE_ENTRADA_NO_VALIDA = "‚ùå Entrada no v√°lida. Por favor, ingrese un n√∫mero.";
    private static final String MENSAJE_ID_MAYOR_QUE_CERO = "‚ö†Ô∏è El ID debe ser mayor que 0.";
    private static final String MENSAJE_NO_ENCONTRADO = "üõë No se encontr√≥ el software con ID ";

    // Constructor que inicializa el cat√°logo y el esc√°ner.
    public Menu(Catalogo catalogo) {
        this.catalogo = catalogo;
        this.scanner = new Scanner(System.in);
    }

    /**
     * Metodo para mostrar el men√∫ de opciones y gestionar las selecciones del usuario.
     */
    public void mostrarMenu() {
        int opcion;
        do {
            System.out.println("\n=========================");
            System.out.println("   üåü Men√∫ de Software   ");
            System.out.println("=========================");
            System.out.println("1. ‚ûï A√±adir Software");
            System.out.println("2. ‚úèÔ∏è Modificar Software");
            System.out.println("3. ‚ùå Eliminar Software");
            System.out.println("4. üìã Listar Software");
            System.out.println("0. üö™ Salir");
            System.out.print("üîç Seleccione una opci√≥n: ");

            try {
                opcion = scanner.nextInt();
                scanner.nextLine(); // Consumir el salto de l√≠nea

                // Switch para seleccionar la opci√≥n.
                switch (opcion) {
                    case 1:
                        anadirSoftware();
                        break;
                    case 2:
                        modificarSoftware();
                        break;
                    case 3:
                        eliminarSoftware();
                        break;
                    case 4:
                        listarSoftware();
                        break;
                    case 0:
                        System.out.println("üëã Saliendo...");
                        break;
                    default:
                        System.out.println("‚ùå Opci√≥n no v√°lida.");
                }
            } catch (InputMismatchException e) {
                System.out.println(MENSAJE_ENTRADA_NO_VALIDA);
                scanner.nextLine(); // Limpiar buffer
                opcion = -1; // Forzar que vuelva a mostrar el men√∫
            }
        } while (opcion != 0);
    }

    /**
     * Metodo para a√±adir un software al cat√°logo.
     */
    private void anadirSoftware() {
        try {
            System.out.print("Ingrese ID (mayor que 0): ");
            int id = obtenerIdSoftware();  // Obtener y validar el ID.
            if (id <= 0) return; // Ya verificado en el metodo auxiliar

            // Validar que el ID sea √∫nico.
            if (!catalogo.esIdUnico(id)) {
                System.out.println("‚ö†Ô∏è El ID ya est√° en uso. Por favor, ingrese un ID √∫nico.");
                return;
            }
            // Solicitar los datos del software al usuario.
            System.out.print("Ingrese Nombre: ");
            String nombre = scanner.nextLine();
            System.out.print("Ingrese Tipo de IA: ");
            String tipoIA = scanner.nextLine();
            System.out.print("Ingrese Lenguaje: ");
            String lenguaje = scanner.nextLine();
            System.out.print("Ingrese Uso Principal: ");
            String usoPrincipal = scanner.nextLine();
            System.out.print("Ingrese Precio (mayor que 0): ");
            double precio = scanner.nextDouble();
            // Validar que el precio sea positivo y mayor que 0.
            if (precio <= 0) {
                System.out.println("‚ö†Ô∏è El precio debe ser mayor que 0.");
                return;
            }
            // Crear un nuevo software y a√±adirlo al cat√°logo.
            Software software = new Software(id, nombre, tipoIA, lenguaje, usoPrincipal, precio);
            catalogo.anadirSoftware(software);
            System.out.println("‚úÖ Software a√±adido con √©xito.");
        } catch (InputMismatchException e) {
            System.out.println(MENSAJE_ENTRADA_NO_VALIDA);
            scanner.nextLine(); // Limpiar el buffer
        }
    }

    /**
     * Metodo para modificar un software en el cat√°logo.
     */
    private void modificarSoftware() {
        // Verificar si hay software en el cat√°logo
        if (catalogo.getListaSoftware().isEmpty()) {
            System.out.println("No hay software en el cat√°logo para modificar.");
            return;
        }

        // Mensaje para introducir el ID
        System.out.print("üîç Introduzca el ID del software a editar: ");
        int id = obtenerIdSoftware(); // Obtener y validar el ID.
        if (id <= 0) return; // Ya verificado en el metodo auxiliar

        // Verificar si el software con el ID existe
        if (!catalogo.existeSoftware(id)) {
            System.out.println(MENSAJE_NO_ENCONTRADO + id + ".");
            return;
        }

        // Preguntar al usuario si quiere modificar cada atributo.
        System.out.print("Ingrese nuevo Nombre: ");
        String nombre = scanner.nextLine();
        System.out.print("Ingrese nuevo Tipo de IA: ");
        String tipoIA = scanner.nextLine();
        System.out.print("Ingrese nuevo Lenguaje: ");
        String lenguaje = scanner.nextLine();
        System.out.print("Ingrese nuevo Uso Principal: ");
        String usoPrincipal = scanner.nextLine();
        System.out.print("Ingrese nuevo Precio (mayor que 0): ");
        double precio = scanner.nextDouble();
        // Validar que el precio sea positivo y mayor que 0.
        if (precio <= 0) {
            System.out.println("‚ö†Ô∏è El precio debe ser mayor que 0.");
            return;
        }
        // Modificar software con los nuevos datos
        Software nuevoSoftware = new Software(id, nombre, tipoIA, lenguaje, usoPrincipal, precio);
        boolean modificado = catalogo.modificarSoftware(id, nuevoSoftware);
        if (modificado) {
            System.out.println("‚úÖ Software modificado con √©xito.");
        } else {
            System.out.println(MENSAJE_NO_ENCONTRADO + id);
        }
    }

    /**
     * Metodo para eliminar un software del cat√°logo.
     */
    private void eliminarSoftware() {
        // Verificar si hay software en el cat√°logo
        if (catalogo.getListaSoftware().isEmpty()) {
            System.out.println("No hay software en el cat√°logo para eliminar.");
            return;
        }

        // Mensaje para introducir el ID
        System.out.print("üîç Introduzca el ID del software a eliminar: ");
        int id = obtenerIdSoftware(); // Obtener y validar el ID.
        if (id <= 0) return; // Ya verificado en el metodo auxiliar

        // Verificar si el software con el ID existe
        if (!catalogo.existeSoftware(id)) {
            System.out.println(MENSAJE_NO_ENCONTRADO + id + ".");
            return;
        }

        // Eliminar el software del cat√°logo
        boolean eliminado = catalogo.eliminarSoftware(id);
        if (eliminado) {
            System.out.println("‚úÖ Software eliminado con √©xito.");
        } else {
            System.out.println(MENSAJE_NO_ENCONTRADO + id);
        }
    }

    /**
     * Metodo para listar todos los software en el cat√°logo.
     */
    private void listarSoftware() {
        if (catalogo.getListaSoftware().isEmpty()) {
            System.out.println("No hay software en el cat√°logo para listar.");
        } else {
            catalogo.listarSoftware(); // Llama al metodo de listar directamente en el cat√°logo
        }
    }

    private int obtenerIdSoftware() {
        int id = 0;
        boolean idValido = false; // Variable para verificar si el ID es v√°lido

        while (!idValido) { // Bucle hasta obtener un ID v√°lido
            try {
                id = scanner.nextInt();
                scanner.nextLine(); // Consumir el salto de l√≠nea

                if (id <= 0) {
                    System.out.println(MENSAJE_ID_MAYOR_QUE_CERO);
                } else {
                    idValido = true; // ID es v√°lido
                }
            } catch (InputMismatchException e) {
                System.out.println(MENSAJE_ENTRADA_NO_VALIDA);
                scanner.nextLine(); // Limpiar el buffer
            }
        }

        return id; // Retornar el ID v√°lido
    }
}
